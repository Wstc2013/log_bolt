#-*-coding:utf-8-*-
import time
from lib.mysql import mysql_operation
import logging
import json
from handlelogic_game import HandleLogic
log = logging.getLogger('test_kafka')
#from field.handlefield import HandleField
#from key.handlekey import HandleKey
from field.handlefield_game import HandleField
from key.handlekey_game import HandleKey

class OnlineHandleLogic(HandleLogic):

    def __init__(self, tup):
        self.tup_values = self.tup_value_solt(tup)
        #self.timefield = self.tiemfield_solt(self.tup_value['curTime'])
        #super(OnlineHandleLogic, self).__init__()

    def tiemfield_solt(self, tiemfield):
        time_local = time.localtime(tiemfield)
        dt = time.strftime("%Y-%m-%d %H:%M:%S", time_local)
        return dt

    def tup_value_solt(self, tup):
        new_value = tup[0]
        try:
           value = eval(new_value)
        except Exception as e:
           value = json.loads(new_value)
        return value


    def onlinenum(self):
        onlinenum = 0
        onlinenum_key = ''
        for tup_value in self.tup_values:
                log.debug(tup_value)
                if  tup_value:
                	log.debug("进行%s处理！！！" % (tup_value))
                	timefield = self.tiemfield_solt(tup_value['curtime'])
        		handle_key_obj = HandleKey(tup_value,timefield)
        		onlinenum_key = handle_key_obj.custom_time_key("ONLINE","%Y%m%d")
        		hour_onlinenum_key = handle_key_obj.custom_time_key("ONLINE","%Y%m%d%H")
                	log.debug("key为%s,%s" % (onlinenum_key,hour_onlinenum_key))
        		timestamp_fen = timefield.split()[1].split(':')[1]
                	handle_field_obj = HandleField(tup_value)
        		hour_onlinenum_kindid_field = handle_field_obj.kindid_fen(timestamp_fen)
                	max_onlinenum_kindid_field = handle_field_obj.kindid_max()
                	min_onlinenum_kindid_field = handle_field_obj.kindid_min()
                	log.debug("field为%s,%s,%s" % (hour_onlinenum_kindid_field,max_onlinenum_kindid_field,min_onlinenum_kindid_field))
                	totalonline = tup_value['totalOnline']
                	onlinenum = onlinenum + totalonline
                	log.debug("当前在线人数为%s" % (totalonline))
                	for field in hour_onlinenum_kindid_field:
                		self.redis_obj.hincrby(hour_onlinenum_key,field,totalonline)
                	#max_kindid_onlinenum = self.redis_obj.hget(onlinenum_key,max_onlinenum_kindid_field)
                	#if max_kindid_onlinenum == None:
                   	#max_kindid_onlinenum = 0
                	#else:
                   	#max_kindid_onlinenum = int(max_kindid_onlinenum)
                	#min_kindid_onlinenum = self.redis_obj.hget(onlinenum_key,min_onlinenum_kindid_field)
                	#if min_kindid_onlinenum == None:
                   	#min_kindid_onlinenum = 0
                	#else:
                   	#min_kindid_onlinenum = int(min_kindid_onlinenum)
                	#if totalonline > max_kindid_onlinenum:
                   	#self.redis_obj.hset(onlinenum_key,max_onlinenum_kindid_field,totalonline)
                	#if totalonline < min_kindid_onlinenum:
                   	#self.redis_obj.hset(onlinenum_key,min_onlinenum_kindid_field,totalonline)
        #self.redis_obj.hset(hour_onlinenum_key,hour_onlinenum_kindid_field[1],onlinenum)
        log.debug(onlinenum_key,onlinenum)
        max_onlinenum = self.redis_obj.hget(onlinenum_key,"all:max")
        min_onlinenum = self.redis_obj.hget(onlinenum_key,"all:min")
        if max_onlinenum == None:
           max_onlinenum = 0
        else:
           max_onlinenum = int(max_onlinenum)
        if min_onlinenum == None:
           min_onlinenum = 0
        else:
           min_onlinenum = int(min_onlinenum)
        if onlinenum > max_onlinenum:
                self.redis_obj.hset(onlinenum_key,"all:max",onlinenum)
        if min_onlinenum == 0:
                self.redis_obj.hset(onlinenum_key,"all:min",onlinenum)
        if onlinenum < min_onlinenum:
                self.redis_obj.hset(onlinenum_key,"all:min",onlinenum)
